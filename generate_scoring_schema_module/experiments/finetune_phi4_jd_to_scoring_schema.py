# -*- coding: utf-8 -*-
"""finetune-phi4-jd-to-scoring-schema.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gpD8HJ7oPbz1XEQCj7yIAb7TW_RrWkYj
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# import os
# if "COLAB_" not in "".join(os.environ.keys()):
#     !pip install unsloth
# else:
#     # Do this only in Colab notebooks! Otherwise use pip install unsloth
#     !pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl==0.15.2 triton cut_cross_entropy unsloth_zoo
#     !pip install sentencepiece protobuf datasets huggingface_hub hf_transfer
#     !pip install --no-deps unsloth

from unsloth import FastLanguageModel
import torch
import pandas as pd
from datasets import Dataset
from trl import SFTTrainer
from unsloth import is_bfloat16_supported
from transformers import TrainingArguments

max_seq_length = 10000  # Choose any! We auto support RoPE Scaling internally!
load_in_4bit = True  # Use 4bit quantization to reduce memory usage. Can be False.

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Phi-4",
    max_seq_length = max_seq_length,
    load_in_4bit = load_in_4bit,
)

project_path = "/content/drive/MyDrive/finetune-phi4-jd-to-scoring-schema-project/"

df = pd.read_csv(f"{project_path}/data/finetune_samples.csv")
df.head()

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

ds = Dataset.from_pandas(df)

def tokenize_fn(example):
    inp = f"<|instruction|> {example['prompt']} <|response|>"
    labels = example['response']
    tok_in = tokenizer(inp, truncation=True, max_length=1024)
    tok_out = tokenizer(labels, truncation=True, max_length=512)
    tok_in['labels'] = tok_out['input_ids']
    return tok_in
ds_tok = ds.map(tokenize_fn)

ds_tok = ds_tok.remove_columns(column_names=['prompt', 'response'])
ds_tok

args = TrainingArguments(
    per_device_train_batch_size = 2,
    gradient_accumulation_steps = 4,
    warmup_steps = 5,
    max_steps = 30,
    learning_rate = 2e-4,
    fp16 = not is_bfloat16_supported(),
    bf16 = is_bfloat16_supported(),
    logging_steps = 1,
    optim = "adamw_8bit",
    weight_decay = 0.01,
    lr_scheduler_type = "linear",
    seed = 3407,
    output_dir = "outputs",
    report_to = "none",
)

trainer = SFTTrainer(
    model=model,
    tokenizer=tokenizer,
    train_dataset=ds_tok,
    args=args
)

trainer.train()
trainer.save_model()

sample_prompt = df['prompt'][0]
sample_prompt

tokens = tokenizer(sample_prompt, return_tensors="pt").to(model.device)
out = model.generate(**tokens, max_new_tokens=3000, do_sample=False)
print(tokenizer.decode(out[0], skip_special_tokens=True))

trainer.save_model(project_path + "model/")